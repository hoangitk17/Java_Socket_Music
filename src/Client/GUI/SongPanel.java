/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client.GUI;

import Server.Song;
import chrriis.dj.nativeswing.swtimpl.NativeInterface;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Nguyen Van Hoang
 */
public class SongPanel extends javax.swing.JPanel {

    /**
     * Creates new form AccountPanel
     */
    private final String NEARLY_SONG = "nearly";
    private final String SONG_OF_SINGER = "songofsinger";
    private final String TOP_SONG = "topsong";
    private final String SEARCH_PLACE_HOLDER = "Enter a song name";
    private CardLayout cardLayout;
    Client client;
    Song song = null;
    JFrame parent;

    public SongPanel(JFrame f) {
        initComponents();
        // padding-left 10 px
        setCustomSearch();
        parent = f;
        cardLayout = (CardLayout) plCards.getLayout();
        cardLayout.show(plCards, TOP_SONG);
        lbLyric.setWrapStyleWord(true);
        lbLyric.setLineWrap(true);
    }

    public SongPanel(Client client) {
        initComponents();
        // padding-left 10 px
        setCustomSearch();
        lbLyric.setBorder(
                javax.swing.BorderFactory.createCompoundBorder(
                        getBorder(),
                        javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10)
                )
        );

        cardLayout = (CardLayout) plCards.getLayout();
        cardLayout.show(plCards, TOP_SONG);
        lbLyric.setWrapStyleWord(true);
        lbLyric.setLineWrap(true);
        this.client = client;
    }

    public void setCustomSearch() {
        textInputSearch.setText(SEARCH_PLACE_HOLDER);
        textInputSearch.setForeground(Color.GRAY);
        textInputSearch.setBorder(
                javax.swing.BorderFactory.createCompoundBorder(
                        getBorder(),
                        javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0)
                )
        );
        textInputSearch.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (textInputSearch.getText().equals(SEARCH_PLACE_HOLDER)) {
                    textInputSearch.setText("");
                    textInputSearch.setForeground(Color.BLACK);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (textInputSearch.getText().isEmpty()) {
                    textInputSearch.setForeground(Color.GRAY);
                    textInputSearch.setText(SEARCH_PLACE_HOLDER);
                }
            }
        });
    }

    public void setClient(Client client) {
        this.client = client;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleSearchSinger = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        plCards = new javax.swing.JPanel();
        plSongOfSinger = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lbSinger = new javax.swing.JLabel();
        lbNameOfSong = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        btnShowYoutube = new javax.swing.JButton();
        btnShowMP3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lbLyric = new javax.swing.JTextArea();
        plNearlySong = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ListSong = new javax.swing.JList<Song>();
        plTopSong = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnSearch = new javax.swing.JLabel();
        textInputSearch = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setName("cardAccount"); // NOI18N
        setPreferredSize(new java.awt.Dimension(754, 561));

        titleSearchSinger.setBackground(new java.awt.Color(68, 142, 246));
        titleSearchSinger.setFont(new java.awt.Font("Berlin Sans FB", 0, 24)); // NOI18N
        titleSearchSinger.setForeground(new java.awt.Color(255, 255, 255));
        titleSearchSinger.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleSearchSinger.setText("Search Song");
        titleSearchSinger.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(700, 771));

        plCards.setBackground(new java.awt.Color(255, 255, 255));
        plCards.setLayout(new java.awt.CardLayout());

        plSongOfSinger.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        lbSinger.setFont(new java.awt.Font("Roboto Mono", 0, 14)); // NOI18N
        lbSinger.setText("Tên ca sĩ:");

        lbNameOfSong.setFont(new java.awt.Font("Roboto Mono", 0, 14)); // NOI18N
        lbNameOfSong.setText("Tên bài hát:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbSinger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lbNameOfSong, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lbSinger, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(34, 34, 34)
                    .addComponent(lbNameOfSong, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 255));

        btnShowYoutube.setFont(new java.awt.Font("Roboto Mono", 0, 14)); // NOI18N
        btnShowYoutube.setText("Xem MV");
        btnShowYoutube.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowYoutubeActionPerformed(evt);
            }
        });

        btnShowMP3.setFont(new java.awt.Font("Roboto Mono", 0, 14)); // NOI18N
        btnShowMP3.setText("Nghe mp3");
        btnShowMP3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowMP3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnShowYoutube)
                .addGap(33, 33, 33)
                .addComponent(btnShowMP3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShowYoutube)
                    .addComponent(btnShowMP3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbLyric.setEditable(false);
        lbLyric.setColumns(20);
        lbLyric.setFont(new java.awt.Font("Roboto Mono", 0, 14)); // NOI18N
        lbLyric.setRows(5);
        lbLyric.setBorder(null);
        lbLyric.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        lbLyric.setDoubleBuffered(true);
        jScrollPane1.setViewportView(lbLyric);

        javax.swing.GroupLayout plSongOfSingerLayout = new javax.swing.GroupLayout(plSongOfSinger);
        plSongOfSinger.setLayout(plSongOfSingerLayout);
        plSongOfSingerLayout.setHorizontalGroup(
            plSongOfSingerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plSongOfSingerLayout.createSequentialGroup()
                .addGroup(plSongOfSingerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(plSongOfSingerLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(plSongOfSingerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                            .addGroup(plSongOfSingerLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(13, 13, 13)))))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        plSongOfSingerLayout.setVerticalGroup(
            plSongOfSingerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plSongOfSingerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(53, Short.MAX_VALUE))
        );

        plCards.add(plSongOfSinger, "songofsinger");

        plNearlySong.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Roboto Mono", 0, 14)); // NOI18N
        jLabel9.setText("Danh sách bài hát gợi ý");

        ListSong.setFont(new java.awt.Font("Roboto Mono", 0, 14)); // NOI18N
        ListSong.setVisibleRowCount(6);
        jScrollPane2.setViewportView(ListSong);

        javax.swing.GroupLayout plNearlySongLayout = new javax.swing.GroupLayout(plNearlySong);
        plNearlySong.setLayout(plNearlySongLayout);
        plNearlySongLayout.setHorizontalGroup(
            plNearlySongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plNearlySongLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plNearlySongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(plNearlySongLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 70, Short.MAX_VALUE)))
                .addContainerGap())
        );
        plNearlySongLayout.setVerticalGroup(
            plNearlySongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plNearlySongLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        plCards.add(plNearlySong, "nearly");

        plTopSong.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/search_song.png"))); // NOI18N

        javax.swing.GroupLayout plTopSongLayout = new javax.swing.GroupLayout(plTopSong);
        plTopSong.setLayout(plTopSongLayout);
        plTopSongLayout.setHorizontalGroup(
            plTopSongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
        );
        plTopSongLayout.setVerticalGroup(
            plTopSongLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
        );

        plCards.add(plTopSong, "topsong");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnSearch.setBackground(new java.awt.Color(0, 0, 0));
        btnSearch.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/icons8_search_23px_1.png"))); // NOI18N
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.setOpaque(true);
        btnSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnSearchMousePressed(evt);
            }
        });
        btnSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnSearchKeyPressed(evt);
            }
        });

        textInputSearch.setFont(new java.awt.Font("Roboto Mono", 0, 14)); // NOI18N
        textInputSearch.setBorder(null);
        textInputSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textInputSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(textInputSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(textInputSearch)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(125, 125, 125))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(plCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleSearchSinger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleSearchSinger, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textInputSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textInputSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textInputSearchActionPerformed

    private void btnSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnSearchKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnSearchKeyPressed

    private void btnSearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSearchMousePressed
        // TODO add your handling code here:
        try {
            String keyword = textInputSearch.getText();
            if(keyword.equals("") || keyword.equals(SEARCH_PLACE_HOLDER)) {
                cardLayout.show(plCards, TOP_SONG);
                return;
            }
            System.out.println("click");
            // handle when server shutdown => Client to Login
            if(Client.isConnectionReset == 1) {
                JOptionPane.showMessageDialog(this, "Server Connection reset");
                client.send.message = "bye";
                client.send.flag = true;
                Client.isConnectionReset = 0;
                new LogIn();
                parent.dispose();
                return;
            }
            client.send.message = "key:music:" + keyword;
            client.send.flag = true;
            String message;
            LoadingDialog load = new LoadingDialog(parent, true, LoadingDialog.FLAG_SONG);
            System.out.println("finish loading");
            while (true) {
                message = new String(Client.songFlag);
                if (!message.equals("")) {
                    switch (message) {
                        case "exactly": {
                            showSongOfSinger(Client.song);
                            System.out.println("Exactly");
                        }
                        break;
                        case "nearly": {
                            showSongNearCorrect(Client.listsSongs);
                            System.out.println("Nearly");
                        }
                        break;
                        case "nosong": {
                            showNotFound();
                            JOptionPane.showMessageDialog(this, "Server search error");
                            System.out.println("No song");
                        }
                        break;
                    }
                    Client.song = null;
                    Client.listsSongs = null;
                    Client.songFlag = "";
                    break;
                }

            }
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }//GEN-LAST:event_btnSearchMousePressed

    public void SearchSongWithIndex(int index) {
        try {
            // handle when server shutdown => Client to Login
            if(Client.isConnectionReset == 1) {
                JOptionPane.showMessageDialog(this, "Server Connection reset");
                client.send.message = "bye";
                client.send.flag = true;
                Client.isConnectionReset = 0;
                new LogIn();
                parent.dispose();
                return;
            }
            System.out.println("Click-exactly");
            String keyword = textInputSearch.getText();
            client.send.message = "key:musicE:" + index;
            client.send.flag = true;
            String message;
            LoadingDialog load = new LoadingDialog(parent, true, LoadingDialog.FLAG_SONG);
            while (true) {
                message = new String(Client.songFlag);
                if (!message.equals("")) {
                    switch (message) {
                        case "exactly": {
                            showSongOfSinger(Client.song);
                            System.out.println("Exactly");
                        }
                        break;
                        case "nosong": {
                            showNotFound();
                            cardLayout.show(plCards, TOP_SONG);
                            JOptionPane.showMessageDialog(this, "Server search error");
                             
                            System.out.println("No song");
                        }
                        break;
                    }
                    Client.song = null;
                    Client.listsSongs = null;
                    Client.songFlag = "";
                    break;
                }

            }
        } catch (Exception e) {
            System.out.println(e.toString());
        }
    }
    private void btnShowYoutubeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowYoutubeActionPerformed
//https://sourceforge.net/p/djproject/discussion/671154/thread/e813001e/
        try {
            if (!NativeInterface.isOpen()) {
                NativeInterface.open();
                new Thread(new Runnable() {
                    public void run() {
                        NativeInterface.runEventPump();
                    }
                }).start();

            }
            if (song == null) {
                JOptionPane.showMessageDialog(this, "Bạn chưa chọn bài hát để xem");
            } else {
                if (song.getIDYoutube() != null) {
//                    if (song.isHasKey()) {
//                    new YoutubeViewerDialog(parent, true, song.getIDYoutube() + ";fs=1").setVisible(true);
//                    } else {
                    new YoutubeViewerDialog(parent, true, "https://www.youtube.com/embed/" + song.getIDYoutube()).setVisible(true);
//                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Bài hát không có video");
                }
            }

            // don't forget to properly close native components
            Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
                @Override
                public void run() {
                    NativeInterface.close();
                }
            }));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnShowYoutubeActionPerformed

    private void btnShowMP3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowMP3ActionPerformed
        // TODO add your handling code here:
        try {
                   
            if (song == null) {
                JOptionPane.showMessageDialog(this, "Bạn chưa chọn bài hát để nghe");
            } else {
                if (song.getMp3() != null) {
                    new MP3DialogNew(parent, true, song.getMp3()).setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(this, "Không có file mp3.");
                }
            }
            
        } catch (Exception e) {

        }
    }//GEN-LAST:event_btnShowMP3ActionPerformed

    public void showSongOfSinger(Song s) {
        System.out.println("Show song of singer");
        this.song = s;
        cardLayout.show(plCards, SONG_OF_SINGER);
        lbNameOfSong.setText("Bài hát : " + song.getName());
        lbSinger.setText("Ca sĩ : " + song.getSinger());
        lbLyric.setText(song.getLyrics());
        System.out.println(s.getLyrics());
    }

    public void showSongNearCorrect(ArrayList<Song> listsSongs) {
        System.out.println("Show song near correct");
        DefaultListModel<Song> listModel = new DefaultListModel<>();
        for (Song song : listsSongs) {
            listModel.addElement(song);
            ListSong.setModel(listModel);
        }
        ListSong.setCellRenderer(new SongRenderer());
        ListSong.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        ListSong.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                JList list = (JList) evt.getSource();
                if (evt.getClickCount() == 2) {

                    // Double-click detected
                    int index = list.locationToIndex(evt.getPoint());
//                    final Song element = ListSong.getModel().getElementAt(index);
                    SearchSongWithIndex(index);
                    System.out.println("2" + index);
                } else if (evt.getClickCount() == 3) {

                    // Triple-click detected
                    int index = list.locationToIndex(evt.getPoint());
                    System.out.println("3" + index);
                }
            }
        });
        cardLayout.show(plCards, NEARLY_SONG);

    }

    public void showNotFound() {
        cardLayout.show(plCards, TOP_SONG);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Song> ListSong;
    private javax.swing.JLabel btnSearch;
    private javax.swing.JButton btnShowMP3;
    private javax.swing.JButton btnShowYoutube;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea lbLyric;
    private javax.swing.JLabel lbNameOfSong;
    private javax.swing.JLabel lbSinger;
    private javax.swing.JPanel plCards;
    private javax.swing.JPanel plNearlySong;
    private javax.swing.JPanel plSongOfSinger;
    private javax.swing.JPanel plTopSong;
    private javax.swing.JTextField textInputSearch;
    private javax.swing.JLabel titleSearchSinger;
    // End of variables declaration//GEN-END:variables
}
